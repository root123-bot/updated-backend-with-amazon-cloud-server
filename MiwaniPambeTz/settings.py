"""
Django settings for MiwaniPambeTz project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os, sys
from datetime import timedelta

import os.path
from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=wpsiuk1^(bti#fbp7uupw7t1ulc0z(@swa$d*3o=1ac(mzz&)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'MiwaniPambeTz.Register',
    'MiwaniPambeTz.Customer',
    'MiwaniPambeTz.User',
    'MiwaniPambeTz.api',
    'MiwaniPambeTz.addtocart',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'storages',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MiwaniPambeTz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['%s/templates/' % (PROJECT_DIR)],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MiwaniPambeTz.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ]
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=20),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer', 'JWT'),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators



# HII INASUMBUA COZ UNAKUWA HUJAWEKA STRONG PASSWORD BUT SIJAELEWA HIZI MAMBO ZA STRONG PASSWORD ZINATOKA WAPI WAKATI MIMI VALIDATIONS ZANGU
# HIZO HAPO JUU HIZO ZA STRONG PASSWORD SIJAWEKA AU ZINAKUWA INHERITED FROM 'USERCREATIONFORM' KAMA NDO HIVYO MAKE SURE UNA-ZIOVERRIDE MAPEMA KABISA 
# COZ HII ITAKUJA KUSUMBUA....... OK NISHAPATA JIBU NI KWA NINI ISHU KAMA HII INATOKEA NI KWA SABABU IN settings.py there is 'AUTH_PASSWORD_VALIDATORS' which
# add strong password validation to on creating password... Ko hata kama validation za form hapa zime-pass kama hizi zilizopo kwenye hii AUTH_PASSWORD_VALIDATIONS
# hazijapass ujue kazi ipo lazima itakataa ku-create huyo user....Ko ukiangalia hii variable inakwambia kuwa 'Name of user should not be the same to
# password, then kuna ishu ya MinimumLengthValidator, CommonPasswordValidator, and NumericPasswordValidator ukiangalia source code zake utajua inakuaje
# but kama huzitaki then delete them in this variable of AUTH_PASSWORD_VALIDATORS... Ko nahisi hadi hapo ushaelewa kuwa validation zipo nying sio tu hizi ulizonazo
# hapa in this form.... this is from Register/forms.py
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'https://personalyzer-frontend.vercel.app'
]


# Give this guy credit on HOw to send mail coz ulikuwa ushachemka
# https://www.youtube.com/watch?v=iGPPhzhXBFg
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'kelvinnameless666@gmail.com'
EMAIL_HOST_PASSWORD = 'opkstfrgmmlsgrhk'  # this is app password for my gmail https://www.youtube.com/watch?v=iGPPhzhXBFg

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
# https://learndjango.com/tutorials/django-static-files
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static')  # there is not 'static' folder in BaseDir lazima ilete error..
# ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # this will copy all static files to this folder on running 'manage.py collectstatic'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



AUTH_USER_MODEL = 'Register.CustomUser'

AWS_ACCESS_KEY_ID = 'AKIAV7L6M4ZSDJWEHV5U'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'personalyzer'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'